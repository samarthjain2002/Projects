0:00
learn Django by building a simple Online Marketplace Django is a python framework
0:06
that makes it easier to build websites with python Stein with code from Stein
0:11
teaches this course Stein is a very experienced course creator the project
0:16
you develop in this course features authentication communication between users a dashboard for items form
0:24
handling and more in this tutorial I'm going to show you how to build an online marketplace where people can sell and
0:30
buy new and used items first I just want to show you a little demo of the project so you know what we are going to build
0:41
okay so here we can see the front page of the project we are building you have a simple menu with a few items you can
0:48
go to the inbox dashboard you can browse items and you can create a new one on the front page the six newest items will
0:55
be showing and at the bottom you can see the categories you'll also see how many items that belongs to each of the
1:01
categories and if you go to for example new item you should be able to select the
1:07
category for item fill out information at the name description price and add
1:13
image the browse page you should search in title and the description of the product
1:20
and you can go to categories if you just want to see toys for examples and you
1:25
can clear the filters in the inbox you should see conversations that you have with other
1:31
users and you can go into here and you can talk directly to the owner of an item you can also go into an item here
1:39
and click contact seller if you want to do that on the dashboard you have your items here you can edit them and delete
1:47
them so if you go into one of these then you have two buttons here edit and delete and on edit page you can just
1:54
fill out information just like you did when you created it and you can set here if it was sold or not
Introduction
2:03
I'm going to begin by installing and setting up everything we need and then build the project piece by piece I would
2:10
recommend that you know the basics of HTML before you start this course because I'm going to focus mainly on
2:17
Django and a little bit of Tailwind okay let's get started building the project
Setting up
2:25
so first I go to a command line and the first thing I want to do here is to set up an environment that Django can work
2:31
in Python comes with a built-in virtual environment called then which I'm going
2:36
to use right now I'm inside a folder called puddle which is the name of our project
2:43
then to create the environment I just run the command Python 3
2:48
Dash M then and then the name which is just EnV what this command does is that
2:53
it creates a virtual environment called EnV a virtual environment is an isolated
2:58
little environment on your computer where you can install pattern packages like Django just for this project
3:06
this makes it really easy to maintain deploy and similar in order to have the environment created
3:12
we can activate it by running stores EnV bin activate
3:19
and then you can see here that the name of the environment is prepended before the project name
3:25
and when it's activated we can install Django busing pip install Django
3:31
this will now install the newest unstable version of Django and if you dependencies that Django has
3:38
great so the last step of this setup now is to create Django project and we can do that
3:45
by running Django Dash admin start project and then the name which is
3:51
puddle great so let's go into this CD puddle
3:56
just to see what files we have there so we have a managed.pi and a puddle
4:02
folder let me just go to visual studio code which I'd like to use where I have
4:07
open up this folder with environment and the Django project so this manage.pi file is sort of a
4:15
script for running administrative tasks like updating the database structure adding super users running the
4:22
development server and similar plus you have another folder here with
4:27
the same name of the project asgi.pi and wsgi Pi are entry points for
4:34
the web server and you don't have to think about these files at this moment these are only going to deploy a project
4:41
to a live server and then you have settings.pi which is
4:47
kind of like a global configuration for the whole project here we have secret Keys installed apps
4:54
and where templates are located information about the database how we
5:00
want the password to be structured and similar and the last file is the urls.pi this is
5:07
a file that can be thought of of like a table of contents for the whole project so this area will link the URL to a
5:14
specific View so I'm not going to explain these files more right now it's easier to do that
5:21
when we start using mm so you have some context okay let's go back to the command line
5:26
and then we're going to run the Django development server and just to see that everything is okay
5:32
and to run this with just a python Dimension by run server
5:37
then you can see here that you get the warning I will come back to this later right now we can just copy this address
5:44
and go to browser I like to use Google Chrome and then just paste it here
5:51
then you can see here the install worked successfully congratulations nice
5:57
so now that we have everything up and running we can create our first Django app
First app
6:04
a Django app is a folder with some files it's used to separate the views
6:09
templates database models and similar for a specific part of a project
6:15
for example the pages like the home page contact about and similar will each be stored in one Django app but we will
6:22
also have one app for conversations and one app for items and so on but we'll
6:29
come back to this later right now I just want to focus on the front page so I want to begin by
6:35
creating a new Django app called core and to do that I need to go back to the command line stop the web server and
6:42
then say python managed by see here that we use this file now
6:47
start app and then core
6:52
and this will now create a new folder with a few files so we can see that we
6:57
have it here we have the migrations which is information about the database this is
7:03
generated by Django so you don't have to think about it right now admendous pie is where we register the
7:10
database models to be used inside the Django admin interface
7:16
dot Pi is like a configuration file but just for this specific app
7:22
models.pi is where we Define database models like information about what we
7:28
want to store for an item for example the title description price and similar
7:34
test.pi is where we can run automated tests and similar for this app
7:39
and views does Pi is where we Define views for the app so it can be a bit hard to understand
7:45
what all these files do but I promise you that you will get a better understanding of them when we start
7:51
using them and now that we have created this app it's almost ready to be used we just
7:57
need to tell Django that app exists and they're going to use it so if we go back to settings.coin you
8:04
can see here that we have a little segment called installed apps we have a few of these built-in apps here already
8:11
and then at the bottom you can add core and the functionality that comes from
8:17
these built-in apps is something that most djangos that's used at some point for example you have the admin interface
8:23
where we log in and can add the data to the project we have one for handling sessions a one for handling
8:30
authentication and similar I will come back to a few of these later
8:35
in this video so since you know I added core hair Django knows that this exists
8:41
and is going to be used so then we can begin setting up the front page
8:47
so if I just close this and find views.pi we can create our first View
8:52
So Def index then we pass in a parameter called request this is information about the
8:59
browser your IP address if it's a get or post request and similar
9:05
so this has to be put in on all views that we use and then we just want to render a
9:12
template very quickly by saying return render and we Post in the request parameter so this will now be available
9:19
inside the template and then the template we're going to use which is core slash index.html
9:28
and save so this is how simple a view can be and now that we have the view we can
9:36
create the template so inside the core folder create a new folder called templates
9:42
Django will automatically look for a folder called templates inside all of the register apps in the installed apps
9:48
section and then inside the templates folder I want to create one more folder called
9:54
core this refers to the core from The View we
10:00
just created so this folder so Django automatically find this folder and then it will find the core index file in here
10:10
and then in here we can just create a new file called index.html and this will do something
10:17
like this so we add the doctype HTML the HTML tag head
10:24
and then here we can set up the meta chart set charge it utf-8
10:31
and then we can set up the viewport meta name view Port content this is so that
10:38
page can be a mobile friendly width equals device Dash width and
10:47
initial Dash scale s1.0
10:53
and then I want to include Tailwind as a CSS or as a CDN so script SRC HTTP test
11:02
colon slash cdn.tailwind css.com and then we can just close this tag
11:11
right like that now we can add a title to the page title puddle close this one
11:17
title close the head create an important tag and then in here
11:22
you can say div class p x 6 py6 space in
11:28
here and H1 the front page then we can
11:33
oops sorry closed H1 close the div close the border and close HTML and Save
11:42
so the last step now is to add this to the urls.pi file
11:47
so if I just open up the folder here again and find puddle URL step by
11:53
then we can import The View we just created so from core.views import index
12:01
and we can add it to the top of the URL patterns path set the path to be empty
12:07
since this is the front page and then we want to use the view called index now we can set the name for this
12:13
to be index and Save so if I now go back to
12:21
here again that we can run the server go back to Chrome and refresh and now
12:28
I'm at the front page and we can see here that I have space above and on the side and this is now H1 from Tailwind
12:35
nice okay so now that we have all of this we can create a new page a page for the
12:41
contact information but let's begin by fixing up the front page a little bit first
12:47
because right now all of this code is inside index.html file I want to move
12:52
most of the code into a new file called base.html which the index.html file
12:58
should extend this way we can reuse the code for more templates throughout this
13:03
project so inside the same folder as index.html
13:08
we can create a new file called base.html great so here I can actually
13:15
just copy all of the code from the index.html copy this and paste it here
13:24
and then save this actually I can take this cut it out save
13:31
and then in index.html file to now extend the base file we can say extends
13:39
core slash base dot HTML then below here and just paste this
13:44
title so now this will make sure that we extend the best.html file but the
13:50
content is missing so if I go to the browser and refresh the title is gone
13:56
so we need to introduce something called a code block so let's go back to paste.html and add
14:02
that inside this div here so block content
14:08
and close it and block this will not help yet but if I copy
14:13
this go back to HTML index.html wrap it around the content here
14:20
then we make sure that everything we put in here will be rendered automatically in here by Django 7 now refresh you did
14:30
that the title is gone but the content from here uh sorry this doesn't have to be inside
14:37
all of the templates nice so let's add one more code block to the
14:43
base.html file for the browsers tab title so in here
14:48
you can say block title and then and block
14:54
space and then we pipe it like that so then on the index.html file create
15:01
the same code block block title and now we can say welcome here
15:08
and block and then welcome will automatically be put here in front of
15:13
the pipe pedal see if I now refresh it will say welcome pedal nice
15:20
great so now we can continue to the contact page let's begin with the view
15:25
so in views.pi we create a new view depth contact passing the request parameter return render request course
15:35
Dash contact dot HTML and Save then we can create a template so let's
15:41
just copy everything from index.html create a new file we'll paste this and
15:48
save it as contact.html in the same folder then we can rename the title of the of
15:56
the page to contact and then the contact page
16:01
then we need to add this to the URLs also so let's begin by importing it
16:07
contact and import contact and remember to end
16:12
this with the Slash let me pause in contact here that the name to be contact
16:18
and the name we put in here would make it easier to reference this URL later in
16:25
the project so if I now go to the browser and just manually go to contact
16:31
then you will see that we are on the contact page perfect before we dive deeper into Django I just don't add a
16:37
menu and a footer so let's go back again to base with HTML and edit there
16:43
so base.html and then above here add a new no close
16:51
py6 PX 6 Flex because we want items to be next
16:58
to each other justify Dash between so that all space
17:05
is put between the logo and the links if you remember from the demo
17:11
and then items Center so that the links is on the same height as the logo
17:18
and then we want the border on the bottom one pixel so border Dash B for
17:24
Border bottom and the color for the Border can be border Dash gray 200
17:30
and then close the navigation bar like that
17:35
and then on the left side we want a logo so a hrf
17:41
slash I'll add a close to this text Dash XL
17:46
and we want the form to be summable so font oops font semi bold
17:52
purple so let me save now go to the browser see
17:58
if this is correct yes so I don't have a navigation bar here which is white with the border on the bottom and then the
18:04
logo to the left here nice and then I want some items on the right
18:11
side here so then I need to create a new div oops
18:16
div close space Dash X6 and this will
18:22
automatically now add a space between each of the items I put in here
18:28
so first can you begin with the new item link a hrf it's going to just be empty
18:35
for now close text XL oh sorry text LG
18:41
front semi bold and when we hover this I want it to be
18:46
gray so hover colon text Dash gray 500 new item
18:54
so let me see if this looks good yes so now it's put here on the right
18:59
side and when I hover it it becomes gray nice so let me copy this to make a browse
19:06
link browse
19:11
and then I want to sign up a button and a login button so this looks a little
19:17
bit different so I just want to create a new element H or if can just be empty
19:22
for now close and this I want to have some padding so px-6 and py3 text can also be LG and the
19:33
font can be semi bold just like a pair but I wanted to have a background so PG
19:40
teal 500 this is a dark green color then I want to set text to be white
19:46
I want the corners for the button to be around that so I can either rounded Dash XL
19:52
and when we hover this I want the background to be a little bit dark or green so hover PG teal 700
20:01
and then we add the title sign up even I'll make a copy of this we can do
20:08
the same thing for the login a sec I want this to be gray 500 and gray 700
20:15
when we hover this then just replace the title with log in and Save
20:21
so if I go back now refresh we have the new item browse and then these two with
20:26
the hover functionality great then I wanted a very simple footer here
20:33
as well so the nice thing is now that for but before I go there I just want to
20:40
show that this comes from the base.html file so if I go to front page the menu
20:45
is there as well that's what's so nice about extensions so let's go back to
20:51
base.html and create the footer So Below this div you can add footer
20:57
oops footer close py-6px-6
21:05
Flex justify between just like up in the menu and we got the b g the background
21:12
to be BG gray 800 so it's a dark gray color I can close this
21:19
I'm done in here on the left side I want information about the project div clause
21:26
W 2 3 so this will take up to a third of the footer
21:32
padding rate can be set to 10. close this one and then in here I want the title so H3
21:41
class mb-5 front semi bold
21:49
and this can be text Gray 400 about
21:54
so we can save this now see what this looks like refresh so here I have the dark footer
22:01
and then the title and down below here I want just a little bit of random text
22:06
some lorem ipsum so P close text LG text Gray 500 or if blah blah
22:18
blah so just copy paste and close the
22:23
paragraph so then we have a little bit information about the project here
22:29
then on the right side I want one more menu where we can link to about page to contact privacy terms of use and similar
22:38
so here with a div close W1 slash three
22:44
this doesn't need any padding and then here we had just make a copy of
22:50
this title same menu instead and then I want to use a UL for the menu
22:58
so you are close space Dash Y dash 2 so
23:03
each of the elements in here have some space between them close the URL and
23:09
then Li a hrf can just be empty for now close text
23:15
LG textile 500 so it's a green color
23:21
and when we hover this I want this to be a little bit darker green color so text teal 700
23:28
but closed link and close the Li so let's see what this looks like now
23:35
don't have the menu here nice so let's add a few more elements here
23:41
I mean that is the contact oops
23:47
privacy and then we have the terms as well as
23:53
terms of use privacy policy to be correct
23:59
nice so if I refresh now we have the menu and everything we need so now I just want to activate this link
24:06
here and let me go back here and then I want
24:12
to use a code called URL let me just pass in contact and then Django will
24:20
automatically use this URL function to find contact hair and give us this URL so if I
24:29
refresh now click this one and I'm sent to the contact page nice
24:34
by the way if you want to learn even more Django from me then check out my channel code with Stein you can find a
24:40
link in the description below great now that we have the core app with a few pages it's time to start working on the
24:48
categories and the items and for this we need one more Django app
Items
24:54
so go to the command line stop the web server then say python manager by start
25:00
app item I want both of the categories and the
25:05
item to be located in this app so that we need to register this with
25:11
the Django so let's go back to settings.pi and add it in the list here save and we can close this
25:19
so I want to begin with the categories since this is the simplest database model
25:26
so if I just open up the browser here again find the item models.pi
25:32
then we can create a new database model but then close category pausing models.model just so
25:39
Django knows what we are using and the categories should only have one field which is the name so name equals
25:47
models.char field and we need to set the max length there we can set this to 255 so don't have any
25:54
limitations so then when we are created a database model we need to update the database by
26:01
going to the command line and set python manage by make migrations
26:07
so now you can see here that migration is for item we want to create a new model called category and if I open up
26:14
the migrations folder and we have a new file here then you can see here what this is going
26:20
to do so it's going to create a new table called category with the ID field and the name field
26:28
so now that we have done this we just need to tell Django to actually execute this script and that's very easy we just
26:35
python managed by migrate so now you can see here that it created
26:41
it down here the item.001 and also a few other database tables this is from the
26:48
authentication and similar that Django comes with now this warning should also be removed
26:56
so to make it possible to add data or categories to your project we need to log into the admin interface and to do
27:03
this we need a user so let's create one python managed by create super user
27:11
admin admin at turtle.com and then a password
27:17
then the super user created successfully then we can run the web server again try
27:22
to log in so if I just copy this go to new tab slash admin
27:28
then I need to log in with the user I just created
27:34
okay so now you can see here that we have the authentication authorization we have users where is the admin user I
27:41
just created but category model isn't there even though the database should have it already
27:48
but you need to just tell Django that we want the database table to show in the
27:54
admin interface so if you go to item and add the main.pi then we can first begin
27:59
by importing the category model here so from dot models import category and I
28:06
can say dot models because this admin.i file is in the same folder as models
28:12
and then to register it we just say admin.site to register pass in the
28:17
category so if I now go back and refresh the item that appeared here and we have the
28:25
categories database table here nice let's try to add a few if I just click
28:32
add let me add the toys I can add the furnitures
28:39
I can add um clothes
28:45
and save so if you see here now I see two things that I just want to fix first
28:51
of all categories is misspelled that's because Django just automatically adds
28:56
an add an S to the end of the app name but this should end in IES
29:02
and same here category object three doesn't tell me anything about what this
29:07
actually is so we need to set the string representation for this clause
29:13
so if I just go back to the model Supply we can begin with the categories name
29:20
so Class Matter and then we say verbose name plural
29:28
categories and Save a very fresh now you can see here that
29:35
this is now spelled correctly then I want to show the name of the category here so now we need to override
29:42
the string representation so depth Str self return self.name so I just want to
29:49
show the name the value from here it's even now refresh is it closed
29:55
Furnitures and toys nice thing I just want to do now is to order
30:00
this by name and this is also done in the meta which is kind of options for or
30:06
configurations for the model so ordering name
30:12
and since this is a typical we need to add a comma here since this is a
30:17
iterable so refresh then everything looks great there nice
30:24
and then I want to go to the next database model which is the item model
30:31
so below here because I close item because in models.model
30:38
I want this to have a name as well so I can just copy this paste it
30:44
and I want the description so description equals models dot text field
30:50
so this is now expected to be much longer than 255 characters that's why I
30:56
want to use a text field and not a chart field I guess the blank equals true and null
31:01
equals true in case the user doesn't want to provide a description for the project
31:07
and then I want the price for the price field so price equals models.float field
31:15
and I want a Boolean field to Mark if it's sold or not so is sold equals
31:24
models.bully in field default should be just a defaults
31:30
and I want to know when this was created so created at equals model dot date time
31:37
field and I just want to add this automatically so then I can just add here Auto now add equals true then
31:45
Django will handle this for us but I also want to know who created this
31:51
so create that at night created by equals model dot foreign key now this is
31:58
a index in the database between this item and the user for example adding a
32:04
new user so here I can pass in the user which I will import very soon
32:09
and then I need to set something about the related name to items so it's very
32:14
easy to get all of the items belonging to a specific user and then the last parameter that we need
32:21
here is the on delete models dot Cascade so if a user is deleted all of the items
32:27
will also be deleted so now we can see here that I get an
32:33
error because user is not defined so I need to imported a pair from
32:39
django.comtrib dot auth dot models import user
32:45
then the warning is now gone also I want one more foreign key after
32:50
the category so category equals models Dot foreign key for send category
33:00
and then we can set the related name here also to items and on delete models
33:05
dot Cascade so if you delete the category all of the items belonging so let's category will also be deleted
33:13
so the last field I want to add now is the image so for example below the price we can
33:20
use the image equals model dot image field then I want to specify where on the
33:27
server I want this to be uploaded so upload to item images and then Django we create
33:35
this folder for us if it doesn't exist blank equals true and no equals true in
33:42
case the user doesn't want to provide an image so if I now save we can go and
33:48
update the database again so just go back to the terminal stop the web server
33:53
then you can see here that I can't use the image view because pillow is not installed I'll just sort this I just
34:00
need to run this command so clip install pillow a pillow is a python library for
34:06
handling images like resizing saving them and similar so now that this is gone add-on I can
34:14
run the make migration script again and you can see here that I changed the meta option for the category and I want
34:21
to create a new model called item and then just pattern matched by migrate
34:28
so the last step 10 or the next step is to register this in the atom interface
34:34
again so import item and admin.site register item and Save
34:41
so if I now go here refresh okay sorry I need to run the server again of course
34:48
refresh and then I have the items here but before I can create any one I just
34:54
need to do some configuration for the images so if I go to the settings.pi
35:02
scroll down we find something called Static files this is formable CSS files
35:07
and similar as you can see here but I need to do the same thing for the media files so media URL should be media slash
35:18
and then where the root folder for the media file should be so media root
35:24
equals base there slash media so now this will create a media folder
35:30
inside the root folder of the project this variable is defined at the top pair
35:36
unless just the root folder for the project so now we can try to add a few of these
35:45
so if I click add item and I select the categories toys
35:50
uh um for example Teddy Bear this is the
35:57
description and then the price for example 100 and
36:03
then an image then I can select the teddy bear and this is created by admin
36:10
so then I can click save and add another one to create one more in the clothes
36:16
and then check it blah blah blah just add some random information
36:24
and then select an image okay it's shoes that I have here so shoe
36:30
one and this is also created by admin so now you can see here that I have the
36:37
same string representation problem here you just want to fix that before I do anything more just copy this paste and
36:44
save refresh and I will see the name of the item so if I now go back to visual
36:50
studio code you can see here that we got the new folder called media and then Django created a new folder called item
36:56
images and in there the images is uploaded nice so now I want to show the newest
37:04
products from the database on the front page so let's find core use.pi then we need
37:12
to import the database models here so from item dot models import
37:19
category because I want to show this as well and item and then I can get the six newest
37:26
project products here the same items equals
37:31
item.objects dot filter is soul equals false because I don't want products that
37:37
is sold and to get six I can just say six like
37:43
this 0 to 6. and then to get all of the categories he has a categories equals category Dot
37:51
objects.old and then to post them in and to be able to use them in the template we need to
37:57
add a context here so comma categories past n categories and items
38:06
items now this here two points up to this nice okay so then we can begin by
38:14
showing that items so in the index.html you can just
38:20
remove this one and create a new div class
38:25
margin top six so we have some space up to the menu
38:31
px-6 py12 PG gray 100 rounded Dash XL
38:41
close that div and then in here I want to add a title so H2 close
38:48
mb12 text 2 times XL text Center and then the
38:55
title newest items and save so let's go to front page just
39:01
to see that it looks okay yes newest items and then I have a box
39:07
here to show the items and so here I want to have a grid virtual three and
39:12
three items So Below the title I can create a new div close
39:18
grid grid calls three because I want to add three columns and then get three
39:25
oops cap three which is the space between each of the items
39:31
and then in here I want to Loop through the items that we provided in The View
39:38
that is these ones which is a list of items and we can just F4 item and items
39:47
close this one and four and then we create an element here div
39:54
close it and a hrf just close that one as well it can just
40:00
be empty for now and then we can show the image on the top so it did
40:07
and then ink SRC item dot image
40:13
dot URL now this will give us the full absolute URL to the image Clause rounded
40:21
top XL so at the top of the image you'll have rounded corners
40:28
and then below here I want to show the name and the price so div Clause P6 so I
40:34
have padding on the side and on the top and bottom what the background to be white and
40:41
rounded B Excel so the bottom of this div will be around that corners
40:48
and then here we have a H2 for the title text to XL
40:54
item.title I can close that one and below here I
41:00
want to show the price P plus text Gray 500
41:06
price item dot price and close
41:13
so even now save this we should see a loop of the project the products we have
41:18
added okay the name is there because it's name
41:24
and not the title sorry so I had a teddy bear press 100 shoe
41:30
price 50. nice but the image is missing
41:35
and this is because that Django really doesn't handle media image for us but
41:40
since we are just in development now we can do a little hack or use Django for
41:47
this but in production you should never do this so inside the urls.pi we can import two
41:53
new things from chango.conf import settings
41:59
and from django.conf.urls static import
42:08
static and then at the bottom here you can add this plus static
42:16
settings Dot oops media
42:21
URL so now this points to the URL that we set in the settings Supply and the
42:27
document root to find its files is settings dot media
42:36
root and Save so even now go back and refresh the
42:41
images is loaded nice and then below the newest images I want
42:47
to show the categories just like in the demo so let's go back to the template
42:54
and make a copy of this
43:02
and just paste it below here and instead of saying newest item to say categories
43:09
close this there and I can close that div and then in here I would Loop through the categories
43:16
so for category in categories
43:22
and four and then I can show
43:28
you can actually copy most of this and just paste it in here
43:34
but the categories doesn't have image so let's remove that and the categories
43:40
doesn't have uh price but we can show how many
43:46
products or items is in here so to do that we can create a function
43:52
or we can just say category dot items dot count
43:59
and items so I think this should be correct
44:05
one items zero items one items but this should of course be category
44:11
dot name so now we uploads on items Furniture
44:17
items toys phone items nice so now we have a working front page for
44:23
this project next step now is to make it possible to
44:28
go into the detail page of an item so let's begin with the view for this this
Item detail
44:34
view should be in the item views.pi so here we can set def detail crossing
44:41
the request parameter but since we want to find the detail of an item we need an
44:47
ID or a primary key for this so let's add one more parameter here PK for
44:52
primary key and then to get this from the database with the item equals get object or 404
45:01
right angle will give us a 404 error if this object doesn't exist in the
45:06
database and we want to get this item from the item model where the primary key is
45:14
primary key so this is now the primary key on the model itself and this is the one we get
45:21
from the URL so you can see here that I get two warnings because I haven't imported this
45:27
shortcut this can be together with render and I need to import this model
45:34
so from dot models import item so now the warning is gone now we can
45:41
return and render template so return render Quest
45:47
in item slash detail.html and then the context which is item item
45:54
and Save so the next step then is to create the folders and this template so here create
46:02
a new folder templates and item
46:07
and detail so detail.html
46:13
and this should also extend the base.html so extends
46:20
core slash paste.html I won't have the title here so block
46:26
title and then in here we can show the name of the the items item.name
46:33
and then just close this block and block then the block for the content block
46:40
content and block
46:47
so then in here I would have a grid for I want to show and then in here I want
46:52
to have a grid because I want to have the image on the left and then information about the item on the right
46:58
side so div class grid grid calls five
47:05
and get can be set to six
47:12
and then on the left side we have the image so div close call
47:19
oops called spam call sorry call Dash span three because
47:26
I want to take up three of the available filed columns msrc
47:32
item dot image dot URL close rounded Excel because I want image
47:40
to have rounded corners so before addending more hair I just
47:46
want to see what this looks like so the next of them is to import this into the URLs file
47:54
I want to have a separate URLs file for the items because this is a much cleaner way to do this
47:59
so here I want to create new file urls.play and then we first need to import pod so
48:05
from django.urls import path
48:11
and we can import all of the views for the items from dot import oops views
48:20
and URL patterns oops URL patterns
48:26
path and when this has an integer primary key we want to use the views dot
48:33
detail View the name can be detailed
48:38
so this now expects an integer called primary key or PK and this PK has to be
48:45
the same as we've set there and detail might be a little bit
48:50
confusing now so I want to import or Implement something called at the name here
48:56
name item I will show you very soon how this works this will now be a namespace
49:02
for this app then I just need to import this URLs
49:07
file to the main URLs file so in puddle urls
49:13
at the topic part items include
49:20
item.urls and this points to the URL file we just created and I get the warning here because you
49:26
need import this together with pot and then all URS that begins with item
49:33
will automatically take Lego into this and check if there is a pod with the
49:39
primary key there nice so the last thing we can do now before
49:44
we test this is to go into index.html and activate
49:50
the link here so URL then we provide item which is the
49:56
namespace or the app name detailed then we provide the primary key by saying
50:01
item.id save so now Django will fix this URL for
50:08
us so if I click this now teddy bear you can see that I'm sent into the detail page for the teddy bear and you can see
50:15
the teddy bear name up there great so now I want to show some information on
50:20
the right side here select the name the price who is selling this the description and similar
50:27
so let's go back to the detail.html create a new div class
50:33
call span span whoops Dash 2
50:39
close that div actually I want some more classes here like p-6
50:45
and BG gray 100 and rounded XL
50:52
and then the first element in here I want to add is an H1 H1 Plus
51:00
mb-6 text 3 XL and then item dot name
51:05
close to H1 let's see what this looks like yes we have the gray box here with the
51:12
title nice so now let's add the price and who's selling this so P close
51:18
text Gray 500 trunk price
51:27
item dot price and close the paragraph if I just make a cooked this I can
51:35
rename the tight layered cellular and then item dot created
51:41
by dot username so basically give us the username for the person who added this
51:47
so 100 and seller is admin below here I want to show the
51:52
description for the product item so P plus
51:58
text Gray 700 is a little bit darker strong
52:05
and then close you can have a text Gray 500 and this
52:10
description [Music] closed string at the BR for line break
52:18
and then item dot description
52:23
close that one and Save
52:28
so I only want to show this description or this title if there is an actual
52:34
description so we can test that up here if item.description
52:40
so now this will only be rendered if the user filled in and description for the item
52:45
so let's close this and if like that and then below here I can have a button
52:51
which we will activate later a hrf class
52:57
inline block margin top six we're gonna space on this
53:02
padding X6 and py3 text can be large and the font can be
53:08
semi-bold and the background can be bjtl-500
53:16
text can be set to White and if we hover this we want the background to be darker
53:22
so hover PG TLD 700 and we can also have
53:27
rounded Corners it's all rounded Dash XL and then the title contact seller
53:36
so we'll come back to this and activate it later but let's make sure it's looking good and it does
53:43
nice then below here I just want to show the related products or items so if
53:50
there are more products in the same category so let's add one toy car
53:57
blah blah and toy car
54:04
is it by admin and then I want this to be showing at the bottom here so let's first make some changes in the
54:12
view because here is where we get the related items related items equals
54:19
item.objects filter and then I want to get all of them
54:27
items in the same category as this one so category equals I10 dot category
54:36
and I want to filter out the ones which set to sold so sold is still false
54:44
and I want to exclude this item from the list so dot
54:50
exclude PK equals PK
54:57
and I only want to have three so zero colon 3 to split it
55:04
and then we just need to append this related items list like this and Save
55:14
and then to show this I just want to Loop through and show them just like we do on the front page so just copy this
55:21
entire div here and paste it below this grid the bottom
55:28
but instead of saying item in items you can say related items and
55:35
place the title with the related items and Save so let's see what this looks like
55:42
related items and I have the toy car here if I go into this the teddy bear
55:48
will be a related product nice great so now that they have the basic browsing
55:53
for this project I want to make it possible to sign up
Signing up
55:58
so I Can Begin by creating it new file in the core app
56:05
so in the core app is where I want all of these views to be located let me just close a little bit
56:12
of this and then in the core app I want to create a new URLs file file to clean
56:18
up a little bit now you can import path again from django.urls import port
56:26
and from Dot import views so import all of the views
56:31
belonging to this app also one is that app name to be core now we set up the
56:39
URL patterns can begin with empty one pot something
56:45
views.index and the name is also index
56:50
and we can also add above there so or contact or whatever we created if I just
56:57
go to puddle URLs now we have this contact so let me move this in here and say
57:06
views.contact and Save so now I can remove this from there and
57:12
when the URL here is empty I want to use the include statement here as well so
57:19
include core.urls so now it it will Loop through all of the paths here before it continue
57:27
and tests with the items so then I don't need to import this here
57:33
anymore but if I now save and go here and refresh I will get an error on this
57:39
one in the footer because now this doesn't exist anymore so let me open up base.html and rename
57:47
this to core colon contact since I added app name here
57:53
it's a very fresh note everything is back as it was okay so let's continue with signing up a
58:00
user so inside the core app I want to create one more file called forms.pi so Django
58:06
helps us with creating users validation and similar let's first import forms
58:13
from Django from Django import forms
58:18
and we can import a user creation form from django.com trip
58:25
oauth.forms import user creation form
58:30
and I need to import the database model for the user so from django.com
58:37
oauth models import user and then we can
58:42
create it here so close sign up form now we pass in the user creation form which
58:49
we imported a pair and then we need to do some configurations plus meta do we need to
58:57
set the model we are going to use which is user that comes from Django and then I want to specify which Fields
59:04
I want the user to fill out Fields equals username authentic fill out email
59:11
password one one and password 2 which is the repeat
59:19
password so let's save this for now and then we can create the view where we
59:27
are going to show this form so inside you've used Pi we can import
59:32
the form we just created from dot forms import
59:38
sign up form and then we create the view so at the
59:45
bottom here we can say def synapse in the request parameter
59:50
and then we can create an instant deform form equals sign up form
59:56
whoops and then we say return render request
1:00:03
then the template which is course signup.html now you just need to post
1:00:09
the form into the front end form like this and save then we need to create the
1:00:16
template before we can test this so sign app.html I want this to extend the base
1:00:23
as well oops extends core slash space dot HTML not
1:00:32
add a block title sign up and oops and block
1:00:41
okay have a double there block content
1:00:48
and close this one and block and then in here we can begin with the
1:00:54
Box around the form div clause W1 slash two which just filled out the
1:01:02
half of the screen my6 to have space above and below this button my box and mx-auto so it's
1:01:10
centered on the screen on the background to be PG gray 100 and
1:01:15
have rounded corners close that one then we can have it title H1 close
1:01:24
and b-6 text 3XL sign up
1:01:31
so before I add anything more here we can test that this is working
1:01:37
so let's go to URL point in show where to add it there but sign up
1:01:46
slash views DOT sign up and the name s sign up
1:01:51
now we can update the menu so this link to the correct page
1:01:57
so that is the first link here URL core colon sign up
1:02:05
and Save so if I go back now refresh click sign up now we have this box that fills out
1:02:12
off of the screen and is centered
1:02:17
um looks like I forgot to add some padding to this box so let's go here and
1:02:23
say p-6 save refresh and now it looks a little bit better down below here we can show the
1:02:31
form so let's go back here create the form element form method
1:02:37
should be that post action dot which is the same page we are on
1:02:43
and since we are using a post request we need to add something called a csrf token this is security built in with
1:02:50
Django to prevent cross-site reforce requests for jury I think it's good
1:02:55
I can render the form by saying form.s p
1:03:01
and then we have a button so button class py4 px8 text can be large the background
1:03:10
can be teal 500 and only over this can be darker so BG teal
1:03:18
700 and I want the corners to be a rounded X L and the text to be white and
1:03:27
we can just set the title to be submit and close the button
1:03:32
save go back and refresh and we have the form here which doesn't look very good
1:03:38
but we can try to customize this so it looks a little bit better
1:03:44
so if I then go back here just remove this this is the easiest way
1:03:52
to show the form and we can first make sure that if there are errors that are not connected to the
1:03:59
fields we showed them here by saying form dot non field errors
1:04:05
then we can add a div close mb-3
1:04:11
and in here we have a label for the username label close
1:04:17
inline block margin button to username
1:04:23
close the label and then form dot user name
1:04:30
close that Dev press save it now refresh we just have the username and it looks a
1:04:36
little bit better but I will make it even better let's add a br here
1:04:42
and we can copy this paste it for the email and form. email
1:04:50
and the same with the password password
1:04:56
one the repeat password repeat password
1:05:05
repeat the password to and Save
1:05:11
refresh so now the Forum looks a little bit better we will fix more styling I just want to make sure that we print out
1:05:17
more errors down here if there are any so if form dot errors or
1:05:26
form dot non field errors then we can close this pressing and if
1:05:34
and if there are any we create a new div class and B three
1:05:40
padding six in all Direction background can be PG red 100
1:05:46
rounded XL there
1:05:51
and then we just Loop through the images here and the errors form Dot sorry we need to Loop through
1:06:00
rambasing for field in form field dot errors
1:06:07
close this and four and I just want to move this down there
1:06:14
sorry it shouldn't be up there paste and Save
1:06:20
so if I now refresh it looks a little doesn't look any different and I can
1:06:26
submit it yet but let's fix the rest of the styling here which is done inside
1:06:32
the user creation or the sign up form so let's go back to forms.play and we
1:06:40
need to do some changes here so the username let's begin with that
1:06:47
username equals form dot Char field
1:06:52
then we set something called widget equals form dot forms dot text input
1:07:00
typeset attributes adders equals create the dictionary placeholder
1:07:07
your username save this see if it works yes now we
1:07:13
have a placeholder there now we can add some Clause let's do it as well so close
1:07:19
W Dash full py4 px6 and rounded XL
1:07:28
nice so now this looks much better let's do this for the other three Fields as
1:07:33
well email and this should be an email input
1:07:40
so Django will validate it for us your email address
1:07:46
and then password 1. this should be a password input
1:07:55
or password I can just copy this password to
1:08:02
and then repeat password and save so if I now go
1:08:08
back and refresh the form looks much better still nothing happens if I try to submit
1:08:14
this so I need to do some more changes in the views.pi here I need to check if the user has
1:08:21
submitted and to do that like that if request dot method is post then I know
1:08:27
that the form has been submitted so then you can create a new instance of the form I think form equals sign up form
1:08:34
and passing request dot post which is all of the information from the form
1:08:40
then I can check if it's valid so if 400 is valid then I can say form dot save
1:08:48
and then the user will be created in the database and when that is done we can
1:08:53
redirect the user to the login page that doesn't exist yet we can just say return
1:08:58
redirect login now we will get the 404 error but
1:09:04
we'll fix it later and if it's not the post request
1:09:10
then we just use the amped form like that now we get the new warning here because
1:09:15
we haven't imported this so let's import it up here together with render
1:09:21
so if I now refresh try to submit assign a pair
1:09:34
so then I was redirected to the login there nice but it means that it was
1:09:39
working so when I go to users I will have a code with Stein
1:09:44
the email and the password you can see here that user is active but it's not status staff and it's not a super user
1:09:51
that means that I cannot log in into the admin interface with its user only super
1:09:57
users can do that so now we have the possibility to sign up a user
1:10:04
then we can make a possible to log in a user
Logging in
1:10:10
so I Can Begin by creating the form so if I just go to forms.pi we want to
1:10:16
still be using an authentication form from Django so where we import this we
1:10:22
can also import Authentication [Music] form
1:10:27
and then we create it at the top here doesn't really matter Clause login form
1:10:35
or authentication form I'm done here I want to override the
1:10:43
fields for the username and the password so I can copy this
1:10:50
paste it and the password here it's just called password and not
1:10:56
password one but besides this it's completely same
1:11:03
so I don't need a view for this because I'm just going to be used a login view that Django comes with so if I now just
1:11:10
go to uart Pi I Can Begin by importing this from Django so from jango.com trip
1:11:18
dot oath import views now this will crash with this one so we need to rename
1:11:25
this by saying s auth views then I can append it here port
1:11:31
login slash and then the view we're going to use
1:11:37
which is now auth views Dot Login view dot S View
1:11:44
like that and now set the name to be login but now I need to specify that we are
1:11:50
going to use the form we created here so we need to import it here from dot forms import login form
1:11:59
so I can just say authentication oops Authentication
1:12:05
[Music] form equals login form
1:12:11
so if a note just go to base.html I can import this sorry fix
1:12:18
this here URL core login save
1:12:24
I can try to use it okay so now I get the template does not exist error because this doesn't exist
1:12:31
but this isn't really not the file we are going to use so I need to update here to tell Django
1:12:39
which files to use template name is core slash login.html
1:12:47
and this will look very similar to the sign up for the file so just copy
1:12:54
everything create a new file and save it as login.html
1:12:59
here I don't need a repeat password this should be called formed password
1:13:05
and I only need the username and the password so then I can just fix the title log in
1:13:13
and Save Django automatically calls a form for
1:13:19
form that's why I don't need to rename this and everything should now be working
1:13:25
so let's go back refresh and now we see the login form so now I can try to log
1:13:31
in with the user I created call it Stone and then my password
1:13:37
so now I was automatically redirected to something about accounts slash profile
1:13:42
this doesn't exist and we are not going to use it either it's just the default URL that Django tries to redirect you to
1:13:49
so you can override this by going to settings time settings of
1:13:54
Google login redirect URL so you can be sent to the front page
1:14:00
when you are logged in login URL
1:14:05
so again so if you try to visit the page you don't have access to you you will be
1:14:10
redirected to this URL and you can also that log out redirect URL Wireless here
1:14:19
to the front page or when you logout you will be sent to the front page so if I just remove this
1:14:26
now it doesn't look like we are authenticated I want to hide these two buttons when we are authenticated and
1:14:34
show an inbox button and a dashboard button instead so let me go to base.html
1:14:41
and then above here you can say if request.user dot is authenticated
1:14:49
then I want to show two buttons else then we can show these two
1:14:55
so let me close this and if and save so I'll go back and refresh those two
1:15:01
buttons are now gone that's because their Quest user is authenticated
1:15:07
there is always a user and if it's not authenticated it's an anonymous user so
1:15:13
then I can make a copy of these two buttons
1:15:20
just paste it in there and the first one can be in box and the other one can be
1:15:27
dashboard then they can just be empty for now
1:15:35
say go back and refresh now we have inbox and the dashboard button instead
1:15:40
nice okay so now I want to make it possible to add items for the users
Adding items
1:15:48
so we can begin by creating a new form for this so if I just go back to editor and find
1:15:55
the app for this the item and then create a new file here for forms.pi
1:16:02
then I Can Begin by importing forms from Django from Django import forms and I
1:16:08
want to import the database model item so from dot models import item
1:16:14
then I can create the form class new item form and pass in forms dot model
1:16:22
form mm-hmm like is that the class matter so we can do some configurations we want to
1:16:29
add the model to be item and the fields we want here is category and we want the
1:16:35
name the description oops the price and the image
1:16:44
great so now we can save this for now we will come back to The Styling in a little while
1:16:50
but now we can go to reviews.pi to create the view for this
1:16:56
So Def new request and I want this to be I want Django to
1:17:02
require that you are logged in to access this error so to do that you can add something called a decorator so let's
1:17:10
begin by importing this from django.com trip.org dot decorators
1:17:15
import login required and under apply that to this view we
1:17:22
just add login required so if you want to try to visit this without being authenticated you will be redirected to
1:17:29
the front page now sorry to the login page and then here I can say form equals
1:17:34
new item form we just need to import lists
1:17:39
from dot forms import new item form and then we can say return render
1:17:47
request Post in the template name which here should be item slash form dot HTML
1:17:53
because I want to reuse this for the edit as well then we can pause in the form here form
1:18:02
and form and Save and when that is done we can create the
1:18:08
template so just open up here again and then
1:18:13
inside the item folder create an equal form dot HTML so here we can begin by
1:18:19
extending the template extends core slash base.html
1:18:25
now we set up the title block title
1:18:30
new item no sorry actually here I want to post in a variable called title
1:18:38
you might wonder where this is coming from and I will show you under block
1:18:43
in views here you can append it there title new item but then we can do the same
1:18:50
with the edit view we just say edit edit item
1:18:55
so when that is done you can go down here create a block content
1:19:03
close it and then in here we can begin with the title H1 close
1:19:10
mb-6 text 3XL and then the value here should also be
1:19:16
title which will be new item and then we can set up the form form
1:19:22
method should be post the action can be the page we are on and here we also need
1:19:28
to set something called Inc type to multi port
1:19:33
form data and this is needed to be able to upload images
1:19:39
and then here we add the csrf token close
1:19:45
space dashy 4 to have space between all of the fields and then just form dot s
1:19:53
p so we can close this one and then I want to show the errors there you just want
1:19:59
to copy that from the from the sign up form because this is identical
1:20:06
or the login form that doesn't matter let me just copy this go back and paste
1:20:12
it here and then below here we can have the button which is also the same as in the
1:20:17
sign up or login so just copy this go back and paste it and then you just
1:20:24
want to close the form element okay um you should be there
1:20:32
like that I think everything is okay here now
1:20:37
last step done is to import this to the URLs page so here you can add this above here but
1:20:45
new views Dot
1:20:50
a new item isn't that what I called it
1:20:56
not just new okay and then we set the name to be new
1:21:05
like that great so if I now save then I can go to the menu in base.html
1:21:13
to add the button here so we can have this together with these two the Inbox
1:21:18
and the dashboard can I have it first there
1:21:25
URL should go to item colon
1:21:32
new like that and then we can rename the title the
1:21:38
link to new item and Save so even now go back and refresh
1:21:44
should have a new okay I will already have this of course so I don't need the button there
1:21:50
sorry but okay sorry let me just copy this and paste it there because it
1:21:58
should be on that link it doesn't need a separate button so save again refresh and if I click
1:22:05
this now I will be redirected to the login page because I wasn't logged in so let me log in with code with Stein
1:22:12
and then my password let me try to click it again new item and then I have the form here nice
1:22:19
so then I just want to fix the style length for this so if I go back to forms.pi
1:22:28
I can add it there I can do it a little bit differently here than the other places just to see another way we can do
1:22:34
this so the Jets oops digits equals
1:22:40
and I create the dictionary category colon forms dot select
1:22:47
and then I want to set the attribute so Etters create a new dictionary close
1:22:53
W full py4 px6 rounded XL and border and Save
1:23:05
so we can see if this is working that did not work
1:23:13
okay so I need to have this inside the meta class of course so save this now
1:23:20
refresh and then I have the styling there nice then I can do the same thing for the
1:23:26
other just that I want to have this as a variable so up here I can say input
1:23:33
Clauses equals paste it and then I got the input Clauses like that so I don't
1:23:40
have to repeat this multiple times and this is still working nice
1:23:45
so then I can copy this just at the comma here replace this for name and then forms dot
1:23:54
text input like that and the same with the description
1:24:03
there should be a forms dot text area and then the price which would be text
1:24:12
input and the last one image
1:24:17
which is the file input so then I can save this now go back and
1:24:23
refresh and now the styling here is also working perfect I want some space between these two
1:24:31
by the way so this should have an empty six
1:24:36
that's better great so then the last thing we need to do now is to add a check if this form is
1:24:44
submitted assimilar just like we did in the sign up so in the views.pi here we
1:24:50
can see if request dot method method is post
1:24:57
then form equals new item form and here we need to pause
1:25:02
in request dot post and also requested files so we get the files that user
1:25:08
uploads and then we can say if form dot is valid
1:25:13
but instead of saying just form dot save here we need to do some changes here we can say item equals form dot
1:25:21
save and pause and commit equals false because if we try to save to the database now the created by field is not
1:25:29
added therefore we will get an error if we try to do this that's why we need to set commit false so this will just
1:25:36
create an object but not save it in the database and then item dot created by
1:25:42
equals request.user which is always authenticated since we have this login
1:25:47
decorator item.save and that is done we can just redirect
1:25:53
the user back to the detail page of the item they just created so return redirect
1:26:01
pause in item colon detail and we need to set the primary key
1:26:06
equals item.id which is the item we just created so I get the warning here now because I
1:26:13
haven't imported redirect together from the Django shortcuts
1:26:19
and if it's not a post request then it's a get request and we can do it like this
1:26:25
so that is the whole new view perfect
1:26:30
so we can try it out now if I go here now select the category furniture
1:26:37
chair test the description blah blah two hundred dollars then I want to
1:26:44
select an image so I can take the chair there submit
1:26:51
okay enter a number okay let me do that instead 200 maybe I
1:26:58
should use a DOT instead of a comma submit the image attribute has no file
1:27:04
associated with it okay so that didn't work
1:27:12
requested files that's correct then form as the angk type multipart
1:27:21
slash form Terror this is weird
1:27:30
let me just try to log in here again with the admin user oops
1:27:37
admin
1:27:43
like that and I just want to delete this here or I can set them
1:27:49
chair one with it just so it's working now it's working here but why didn't the
1:27:55
image get uploaded okay let me just try one more time it's
1:28:01
a new item Furniture chair two
1:28:06
hundred choose file chair two submit I guess now it was working so I don't know
1:28:13
what the error was because I haven't changed anything but at least now it was working perfect
1:28:19
so that means that now we have to possibility to add items
Dashboard
1:28:25
okay so now I want to start building the dashboard where you can see your items
1:28:30
edit them delete them and similar so let's start by creating a new app so
1:28:36
python managed by start app dashboard
1:28:42
now we can add this to the settings file dashboard
1:28:49
and Save um here I don't want any database tables but I want to view
1:28:56
so if I just open up dashboard views.pi then I Can Begin by importing the item
1:29:03
model so from item dot models import oops
1:29:08
import item and I can import the login decorator so
1:29:13
from django.comtrib.auth.models import sorry
1:29:19
decorators import login required then I can create the view just begin
1:29:26
with adding this decorator def index request
1:29:32
and then I want to get all that items that you have created so items equals
1:29:38
item.objects.filter created by equals request.user
1:29:44
and then I want to render the template render sorry return of course render passing
1:29:52
the request parameter then set the template which should be dashboard
1:29:58
slash index.html and then here we can pause in the items
1:30:05
and Save so then I can set up the template for this
1:30:11
I think it will be similar to top pair so no it will not that it will be very
1:30:18
similar to the front page the beginning of the front page
1:30:23
so down to the box for the categories let me just copy everything here
1:30:30
and then create a folder templates and then
1:30:35
dashboard and then the file for that index.html
1:30:41
paste this and then I can just say and block
1:30:46
this can just be like it is and the title here can be dashboard and
1:30:54
instead of the newest items I can say my items
1:31:00
and then just save this so now we have the view and the template then we just want to
1:31:06
create a separate URLs file here so URL Point begin with importing from
1:31:13
django.urls import path import import all of the views from dot import views
1:31:19
setup app name to be dashboard and then the URL patterns
1:31:26
then I just want one haircut empty because I want to prefix this in the main URLs file we use that index set the
1:31:34
name to be index and save then I just want to import this
1:31:40
to the main URLs so puddle slash urls.pi
1:31:46
I can add it here below the items or above that doesn't matter Port dashboard
1:31:55
include dashboard.urls and Save
1:32:02
so if I now just open up base.html I can activate this button here called dashboard
1:32:10
URL dashboard colon index
1:32:16
and Save so then we can see if this is working now just refresh sorry I need to run the
1:32:23
server again refresh again click dashboard my items and then I can see them here
1:32:30
nice so now we can continue to make it
Delete items
1:32:37
possible to delete your items so I can create a view for this
1:32:43
so inside the dashboard views.play
1:32:49
here say at login required because you need to be logged in to delete your item
1:32:56
def delete because in the request parameter and the PK which is the ID for
1:33:01
the item we want to delete now we get the item from the database by saying item equals get object or 404
1:33:10
so it's importance we want to use the item model and we
1:33:16
want to get to where the primary key is primary key from the URL and we are created by equals request.user so we
1:33:24
can't get objects that you haven't created yourself and to delete it you just say item dot
1:33:30
delete now we can redirect you back to the index page of the
1:33:36
of the of the dashboard and when I think about it I actually
1:33:42
want to have this in the item I item views instead so just copy and remove it
1:33:49
from there go to item views.pi paste it below here
1:33:56
then we can redirect user to the dashboard so return redirect
1:34:02
dashboard colon index like that
1:34:07
then we can import it to the URLs and add it here just copy this
1:34:13
add delete at the end use dot delete and name is also delete
1:34:20
so if I now go to the detail page you need to do some changes here
1:34:27
so here where we show the price I want to have a box telling it that
1:34:33
it's your is telling it that it's your item
1:34:40
and that should go here below the description together with this contact seller so
1:34:47
here I can say if request.user equals item dot created by
1:34:53
then I know that you are the one who created this create a new theme here mt6 to some
1:35:00
space above p-6 to get Space Inside the Box PG white
1:35:06
and rounded XL to get around that corners if you are not the one who owns the ad
1:35:14
then and only done will I show the button for contacting a seller
1:35:19
and if and then in here we can say p this is your
1:35:25
item and then I can have the delete button here so a hrf
1:35:33
URL item colon delete pause in the item.id
1:35:39
which is the one you are visiting then it is at classes on this button in
1:35:45
line block ing top 6 px-6 py3
1:35:54
text LG font semi bold
1:35:59
PG red Dash 500 so we know that it's dangerous button to click
1:36:05
text white and around the dash XL let me pause and delete here
1:36:13
so let's see if this is working now if I go back here go into one of the items
1:36:18
nice this is your item and delete because now I'm logged in as the admin
1:36:23
user okay I just want to add a edit button here as well so I have it so make a copy
1:36:29
of this one paste it replace the title with edit and the
1:36:35
button here can be green instead so teal 500
1:36:41
and the link can just be empty for now at least now I have these two buttons
1:36:47
great so let me try to delete this one by clicking this
1:36:52
delete and now it's gone from the list there nice
Edit items
1:36:58
okay so now I want to make it possible to edit an item so if I go to the forums.pi inside the
1:37:07
item folder then I can make a copy of this I could reuse this but I want to have an
1:37:15
extra field and I don't want the category here so let me remove the category remove it
1:37:22
from the list here as well and then rename this to edit item form
1:37:28
plus I want to add one more field here is sold like the one we have in the
1:37:34
models.pi this doesn't need any styling so the form can just be like it is now
1:37:41
and then if I go to view stockpile I can make a copy of the new view
1:37:48
paste that I rename it to edit here we need a primary key so we can get the
1:37:53
correct item from the database and I want to get that just like we do down here in the delete View
1:38:01
here I do not want to use the new item form I want to use the update item form and the same down here edit item four
1:38:09
as you can see here and it's import this so let me scroll to the top where we
1:38:14
import the new item form and also import the edit item form
1:38:19
so let me scroll down and then error is now gone we also need to do some other
1:38:24
changes first and it's important I edit the title there and here I do not need to do this here I
1:38:32
can actually just say form dot save because now the created by is already set
1:38:39
one more problem now is that if you try to go to this page the form will be empty so we need to pause in some data
1:38:46
here and to do that we can say instance equals item
1:38:52
and the next problem is that this if we just try to save this the form will get
1:38:58
an error because the instance is not set on this one so let me set it here as well instant equals four no sorry item
1:39:07
so now everything here should be okay so then I just need to update the URL
1:39:14
urls.pi in the item folder a copy of this edit
1:39:21
a date and add it the last step done is to find a detailed page so we can update the URL so URL
1:39:29
item colon edit and pass in item.id
1:39:34
and Save so now this should work so if I try to go to the teddy bear
1:39:40
edit now you can see that I have it here and it said
1:39:46
and Save so teddy bear edited that means that it
1:39:52
was working so you can now create edit and delete items perfect
1:39:59
now I want to work a little bit on the browse page so we can search filter on
Searching
1:40:04
categories and similar so let's begin with the view for this and just close all the files so it's
1:40:11
easier for you to follow along so if I open up item views.pi
1:40:16
then you can have it this on the top so I like to have the list View and then
1:40:22
the detail View and then more specified view below So Def items or you can call it browse
1:40:28
if you want to because in the request parameter here I want to get all of the items from
1:40:35
the database that is not sold so items equals
1:40:42
item.objects.filter is sole equals false now we can render the template return
1:40:48
render request pass in item
1:40:54
slash items.html [Music] and then we just need to pass in the items
1:41:01
and Save so let me import this into the URLs file
1:41:07
in the item folder this can just be empty since the items
1:41:13
is added in the main URLs file views dot items and name items
1:41:22
and Save so if I now open up a base.html we can
1:41:28
update the URL here URL I oops item items
1:41:37
save I can just close that one so now we can test I will get an error now because
1:41:42
you have not created the template so that is the next step so let me go back to visual studio code
1:41:49
create a new file browse dot h sorry items.html
1:41:58
this should also extend the core slash paste.html file set the title block
1:42:05
title and here we can just call this items we
1:42:10
can call it browse or search or whatever you want actually and block and then block type now
1:42:18
content content close it and block
1:42:25
and then here I want this to be split into just like in the demo so I need to add a grid here div class
1:42:36
pb-6 so we get some padding on the bottom of the screen here enter the grid grid calls for Gap four
1:42:48
close this one and then I want one to the left which should be this sidebar where we can
1:42:54
select the filter search similar so div clause call span dash one
1:43:01
just close it and in here should be the Side Bar
1:43:09
and then you have the div clock oops div clause
1:43:14
call span 3 close and in here I want to list out the
1:43:22
the items just like on the front page so if I open up index.html
1:43:29
you can make a copy of this one and just paste it in here
1:43:35
and Save so let me try this now so if I refresh
1:43:40
the template is there we have the sidebar and then the list of items
1:43:46
perfect so then I can begin working with the sidebar here
1:43:51
should maybe have a background here on this hair maybe if I just add it there BJ
1:43:59
gray 100 fresh so then I get the white background
1:44:05
and these and simpler which is a little bit better so then the next step is to add the
1:44:10
sidebar so we can begin with adding a form method get and not post
1:44:18
action should be URL item items that is the one we are on
1:44:25
but I like to do it like this now okay that one
1:44:32
and since this is a get request we do not need the csrf token and then first here we can add the input
1:44:39
field for the query input name query and close W Dash full
1:44:47
py4 px6 on this to be border and around that
1:44:53
XL you can set the type the text
1:44:58
and the value to be query I will get this from the back end
1:45:04
very soon set the placeholder to be find a bike chair
1:45:11
or a car or whatever you want and then below here I want to have a
1:45:18
search button so button close empty-2 the lesson space up to input
1:45:26
field py4 PX eight
1:45:31
text LG bgt 500 and text white around the Excel
1:45:40
search the button and the form is closed okay
1:45:47
so if I save now go back and refresh you should now have the search bar there
1:45:52
nice so let me just fix the backend for this as well
1:45:57
so that we get the query and we post it into the front end when we have it
1:46:03
so at the top here we can say query equals request.get.get query default this to be
1:46:10
empty now we can pause it into the front end as well like that so if I now try this about
1:46:17
today the search will not work but you can see up here the third day is a panda there and we also have it in the form
1:46:24
here nice so let me try to filter the search as well if there is any query so below here
1:46:31
we can say if query and we know that the user has filled it out items equals
1:46:37
items dot filter and then name I contains
1:46:42
equals query so if the name contains the query I
1:46:49
insensitive then the query will be filled out or processed it's probably more correct
1:46:56
so if I refresh now you can see that only this is there if I empty this all
1:47:02
of the items are there but if I want to search in the description as well I need to introduce something called Q
1:47:09
so let's import this from Django Dot
1:47:16
db.models import Q this makes it easier to search in multiple fields
1:47:22
and then in here add the queue around this so if it's in the name
1:47:28
or use a pi pair queue the description I contains
1:47:34
equals query so if the title or the description contains it it will be
1:47:40
searched perfect great so now that you have this we can
1:47:45
continue with the categories first we can get all of the categories from the database
1:47:51
so categories equals category Dot objects.org
1:47:57
so let's import this up here and we need to append this down here in
1:48:02
the context so now I can go back here and then below the form I can Loop through them and
1:48:09
make it possible to click them so I'll just separate this a little bit by adding HR Clause empty to our my six
1:48:19
and then p plus font summative bold cut the chorus p
1:48:27
then I'll Loop through them inside an unordered list
1:48:32
four category and categories
1:48:38
closed and four and then in here because Ally close
1:48:44
py2 px2 rounded Dash XL
1:48:50
and then in here I want to have a link so a hrf URL should be item
1:48:57
item colon items and close it like that and now we can append
1:49:04
the query so query equals query from the form up here but I also need to specify
1:49:12
the category category equals category dot ID which is the iteration
1:49:20
we are on now and then here you can say category dot
1:49:25
name let me close the link and I can close the Li and save so if now go back and refresh
1:49:33
you know where the category is showing here great um but if I now click this nothing
1:49:38
happens and this is not showing as active either so it can be again when
1:49:43
making it possible to show as active so in the close here we can say if category dot ID equals category ID I
1:49:54
need to provide this from the backend times at PG gray 200
1:50:01
and if so this will not work now because we don't have access to this yet so we need
1:50:07
to go back to the Views pi then I guess category ID equals request.get.get
1:50:17
pausing category ID there and then just default this to be zero
1:50:24
and Save if I refresh now it's still not working you just try to
1:50:33
inspect this
1:50:45
okay so that does not work maybe if I default it to this no sorry I
1:50:52
forgot to provide it down here of course and Save
1:50:57
so refresh and it's still not working
1:51:03
maybe if I take it back to zero nope
1:51:09
okay no items if the category.id equals
1:51:15
category ID okay remove category ID from there so
1:51:20
this will just be category which is the name we have a pair
1:51:26
so this is still not working so if I just convert this to integer
1:51:33
down here set this to Zero Save on the refresh now you can see this has a gray
1:51:40
background color nice so then I need to just make it possible to filter on the
1:51:45
categories so above here I can say if category ID then I know that you have
1:51:51
selected a category items equals items filter where
1:51:58
category ID equals category
1:52:05
ID and save so let me refresh and now it's
1:52:10
only getting this if I select clothes it doesn't get anything twice you get these
1:52:15
two nice so that is now working perfect so the last thing I want to do here now
1:52:21
is make it possible to clear the filters so if I just go back to the template
1:52:28
make a copy of these two and that's a clear filters and then in
1:52:36
here I just want to add this input button so make a copy of the UL
1:52:46
I and then in here we have the button ahref which can go to URL item colon
1:52:55
items and this will then reset the filters reset or
1:53:01
clear does not add some Clauses so this is more like a button close
1:53:09
empty two py-4 px8 inline block
1:53:16
PG yellow 500 text and G
1:53:21
and around that Dash XL and text can be white
1:53:27
so refresh and then we have the care filters so if I click this now the
1:53:33
categories are cleared and the search is cleared perfect so everything here is
1:53:38
now working as it should so now automobile was about to
Communication
1:53:43
communicate with each other I want to make it possible for users to send messages to the owner of a product or an
1:53:51
item so we can begin by so we can begin by creating a new app so let's go to the
1:53:56
web server python managed by start app conversation
1:54:02
hit enter then we can register this in settings.play
1:54:07
close these other files conversation
1:54:13
[Music] and Save so when we have this now we can create a
1:54:19
new database model for this so in models.toy I want to create a new
1:54:25
model for the conversation close conversation passing model dot
1:54:32
model and here I want the reference to the item so we also need to import this from
1:54:39
item dot models import item and item equals model dot foreign key
1:54:47
pause in the item and then we set a relate name to conversations
1:54:54
and if you delete an item also want to delete all of the conversations so here
1:55:00
we say models dot Cascade great and then I want to know who is the
1:55:09
members of these conversations so members equals models dot many to many field
1:55:16
because the conversation needs a multiple users the owner and the one who
1:55:21
is contacting you there on depositing the user because the user's object are going to be used
1:55:28
so to relate the name to be conversations so now I get the warning here because I
1:55:33
haven't imported this so I'll do that from django.com
1:55:38
Models import user and then I want to know when this was
1:55:45
created Created at equals small dot date time field
1:55:50
person Auto now add is true and I also want to know when it
1:55:58
was modified so we can update an order by this modified at all models dot date time
1:56:06
field and here it is using for Auto Now equals true so every time we save this object
1:56:13
this will automatically update it threat magic claws meta here so we can
1:56:18
set ordering by default percent minus modified at
1:56:26
and Save um but before we update the database we
1:56:32
can add one more table here close conversation message pause in
1:56:39
models.model I would love to just use message but that would crash with some
1:56:44
built-in functionality that Django has so we can begin by adding a reference
1:56:50
app to the conversation models.4ind key conversation related name is messages
1:57:00
and on delete models dot Cascade so if you delete an item the
1:57:06
conversation will be deleted and also the messages that makes it very easy I need a feel for the content of the
1:57:14
message also text field and when it was created so let me just
1:57:22
copy this and I want to know who created it so created by equals models.49k
1:57:30
user related name can be created messages
1:57:36
and if you delete user also delete all of the messages so model dot Cascade
1:57:45
great now we need to update the database from the make migrations and then the
1:57:51
migrate script then I can just run the server so we have it running
1:57:57
so before I do anything more I want to add open up the admin okay so we can
1:58:03
register them in the admin interface from dot models import conversation and
1:58:09
conversation message admin dot sorry
1:58:16
admin.site.register conversation [Music]
1:58:21
admin.site.register conversation message so that's done nice
1:58:28
so then I want to create a new file here for the forms so we can have validation
1:58:33
and similar forms.play Can Begin by importing the forms
1:58:39
so from Django import forms and we need to import the
1:58:45
conversation message model from dot models import conversation message and
1:58:51
then we create the form conversation message
1:58:57
form percent forms.model form
1:59:04
and then we can add a class meta set the model to be conversation message
1:59:09
the fields we want to use is only content
1:59:15
then we can set up the widgets so we get some nice styling only for the content field
1:59:23
forms.txt area actors new dictionary close
1:59:31
probably full py4px6 rounded Excel and we want to have
1:59:38
a border on it great so if I now save this we can open
1:59:45
up the views.pi in the conversation app and create the first view here so I'm
1:59:50
going to have a separate view for new conversation so when you click the
1:59:56
the contact seller you will be sent this page to Def new conversation
2:00:02
pass in request and the primary key and the primary key here is for the item
2:00:09
and to make it easier to know this maybe I should just call it item underscore
2:00:15
primary key just so I know that it's not for a conversation and then I can get item from the
2:00:21
database get object or 404 item where the primary key is item
2:00:30
primary key then I need to import these two here so
2:00:36
we can begin with the get object or 404 I'm from item that models import item
2:00:45
and then I want to check here if you are the owner then you should not be able to visit this page so if item dot created
2:00:53
by equals request user sorry to equal sign here
2:01:00
then just return read erect to dashboard colon index
2:01:08
or you can redirect user wherever you want but I think this is a good place and import this shortcut as well
2:01:16
and then I want to get all of the conversations connected to this item
2:01:21
where you are a member so conversations equals conversation
2:01:30
dot objects filter item
2:01:36
equals item and then filter where members
2:01:41
in remember to double underscore equals request.user.id
2:01:48
so this is checking now is that if this ID is one of the members then we can
2:01:54
proceed so now I get a new error here because I haven't imported this
2:02:00
so from dot models import conversation
2:02:06
and I can also import the form which is create this from dot forms import
2:02:12
conversation message form and the reason why I want to do this
2:02:17
here is I want to check if there already is a conversation with you and the owner and in that case I want to redirect you
2:02:24
to that conversation so if conversations then there is an actual conversation so
2:02:30
you can just pause it there for now redirect to conversation because we don't have that
2:02:37
page yet and then down here we can check if the
2:02:43
form has been submitted if requested method is post
2:02:49
then we can check the form using form equals conversation form conversation
2:02:56
message form passing request.post data not put post
2:03:02
and then if form dot is valid and the contact field is filled out correctly
2:03:09
and we can create a new conversation so conversation
2:03:15
equals conversation.objects dot create item equals item so to do
2:03:23
this before I create the message and then we need to add U to the members
2:03:29
list and the owner of the item to the members list so conversation.members.ed
2:03:36
request dot user and conversation dot members dot add
2:03:43
item dot created by and I will save it conversation
2:03:48
dot save then we can create the conversation message conversation message equals form
2:03:57
dot save and posting the commit equals false so we don't get error from the
2:04:03
database then we need to set the reference to the conversation
2:04:08
conversation oops so let's just points up to this one and
2:04:14
who created it so created by equals request dot user
2:04:20
now we can save this as well and then we can redirect it back to the item
2:04:25
so return redirect items item sorry item colon detail where
2:04:34
primary key is item primary key and if it's not post request let me just
2:04:40
create an empty form equals conversation message form
2:04:46
then we can return and render the template return render request
2:04:52
pause in the template which here should be conversation Slash new DOT HTML
2:04:59
and we can pause in the form like this save so now I want to create a URLs file for
2:05:05
this app as well oops that's wrong place in the conversation app
2:05:11
urls.pi crunch Django import port and then the
2:05:16
views from dot import views
2:05:22
and app name should be conversation and it's the URL patterns pod can be
2:05:31
new and here we want to pass in the integer called item primary key
2:05:38
and then we just have used dot new conversation and the name should be new
2:05:44
so then to link to this we just say conversation colon new
2:05:50
so let's import this to the main URLs file which is in the puddle folder
2:05:56
thought inbox or you can call it conversation if you want to do that
2:06:02
include conversation dot urls
2:06:07
save and close that file so now I want to create a template for
2:06:13
this so let's begin with the folder templates
2:06:19
conversation and then the template itself new.html
2:06:26
and then again I want to extend the base template so extend core slash paste.html
2:06:34
set up the title block title here we can say new conversation and
2:06:42
look oops and block
2:06:47
and block content and we can add the title layer H1 close
2:06:54
oops and b-6 and text
2:07:00
3XL new conversation close this one and
2:07:06
we can close the and block then I just want to fix the link to this page so we can test that everything is
2:07:13
working so let me just open up detail.html I can activate this button
2:07:20
URL conversation colon new and then the
2:07:25
item ID so if you now go into one of these
2:07:31
okay you need to run cannot import from Django
2:07:37
from django.urls import pod okay so now that is working refresh and
2:07:45
now I can see this since I'm owning this if I go into toy car and set the code
2:07:50
with Stein as the owner just save fresh now I can click contact seller and
2:07:57
then I sent it to the new conversation page so that is working so now I'm just going to show the rest of this form
2:08:05
and I can copy this form from the item form page this will be very similar
2:08:14
so let me just copy this entire form tag
2:08:20
and paste that here here don't need the multi Port because you're not going to send images but the
2:08:27
rest can be like it is maybe you can say send instead of submit
2:08:32
so save go back and refresh and then we have the content which is the message itself perfect
2:08:41
so that means that now I could try to send this hello code with Stein I'm
2:08:50
interested sound so now we're standing back here which
2:08:55
means that it was working and if I refresh then I should have a conversation there I have one
2:09:01
conversation between these two users for the toy car and then the message which contains the
2:09:07
hello code it's time I'm interested message great so now we just want to set up the inbox
2:09:14
page so we can list out all of the all of the conversations that we have
2:09:24
so let me go back to views.play and I think I also want to add the login
2:09:30
required here before I forget that so let me import this as well from django.com
2:09:38
decorator Support login required then we can create the inbox view that
2:09:45
login required inbox Quest and then here I want to get all of the
2:09:52
conversations that you are a member of so I can actually just copy the
2:09:57
statement from up here this can be a conversation you have
2:10:03
created or I suggest that I've been sent to you just to remove the filter for the item
2:10:10
then we can return and render the template return render Quest
2:10:16
conversation slash inbox.html forcing the conversations for the
2:10:23
template and Save so if I now import this into the URLs I
2:10:29
can just put empty here so the URL will just be in books
2:10:34
then we use dot inbox name is inbox
2:10:40
you have an open up best.html I think I have a button for this this one yes
2:10:45
inbox URL conversation colon inbox
2:10:52
save and then go back here refresh click inbox and then I get the template does
2:10:58
not exist error but that's great because it makes sense since I have not created
2:11:04
it yet so let me find a template I can copy a
2:11:09
little bit take this one and then create a new file inbox.html
2:11:17
paste it say inbox in books
2:11:24
and block let's say refresh and then it's there
2:11:29
great so I'm just going to Loop through all of the conversations that we have here
2:11:35
so below here I said div clause space Dash y 6 space between the
2:11:42
conversations for conversation and conversations
2:11:49
I can close this and four and then we can have a link a hrf it can
2:11:57
be empty for now since we don't have a detailed page close block
2:12:04
don't think that is correct actually maybe it's I'm just messing up a little bit and
2:12:11
then we have a div for the image of the item so div clause
2:12:16
p dash six Flex because I want this to be a flex container PG gray 100 and rounded XL
2:12:28
close that one then out the image to the left div Clause padding right can be set
2:12:34
to six in SRC conversation Dot item Dot image.url
2:12:44
close w20 rounded Excel so that the width 20
2:12:50
and we have a rounded corners on the image as well save us save now we can try to see if
2:12:58
this is working yes then I have the image for the toy car there then I want
2:13:03
to show here who the member I'm talking to is and the item we are talking about
2:13:10
so here we can say div close it right under there
2:13:16
then I want to Loop through the members the four member in conversation.members.old
2:13:24
so this is how you get all of the members and using many to many field and four
2:13:31
and if the member is not you then I want to show it here so if member not equals
2:13:39
request.user and four
2:13:46
and then create paragraph Class B Class mb-4
2:13:53
strong member dot username first strong and now we can show when it
2:14:01
was sent so
2:14:06
conversation dot modified that and we know when the
2:14:12
last message was sent so close this one and then below here we
2:14:17
can show what the item is so conversation dot item dot name
2:14:25
and Save so hopefully now I've done something wrong invalid block
2:14:31
tag so this will be and if fresh and let me see Hue we are talking
2:14:37
to when the message was last sent and the name of this item great next step
2:14:45
now is make it possible to click this conversation so you can see the detail page and make it possible to talk to
2:14:51
each other so let me just go to views.pi create a
2:14:57
new view at login required because you need to be logged in def detail request and the primary key
2:15:05
and this primary key is for the conversation and not the item
2:15:11
so now we can get the conversation by getting all of the conversations you have first
2:15:18
so we just set this in not singular not plural dot get where primary key is primary key
2:15:28
and then we can just return this turn render
2:15:33
request conversation [Music] detail.html
2:15:41
and I will pass in the conversation conversation and Save
2:15:48
great so before we do anything with the form here I just want to create a template so that we have it
2:15:58
um I think I can just just copy all of this create a new file and save it as
2:16:04
detail.html and then for the title we can say
2:16:09
conversation Capital C same thing with H1 here
2:16:15
and I want to have this and I want to have this but here I want to say for message in conversation dot messages
2:16:23
all so we pause in the conversation here and we get the messages because they are
2:16:28
linked in this here so go back to the detailed page
2:16:34
then I can remove the anchor tag because this is not going to link to anything
2:16:41
and then here I want to show the message so here I do not need an image for each of
2:16:48
these so let me just remove everything in here
2:16:54
so I still want to have the padding the flexed around it and messages are similar
2:16:59
and then here I can create a new div
2:17:05
and a paragraph be closed and b-4 so we
2:17:10
have some styling for the name and then strong
2:17:16
message dot created by that username
2:17:24
and when it was sent sorry I need to close the strong pipe or at if you want that message dot
2:17:32
created at I can close that paragraph and I can show the message so message
2:17:40
dot content close that and Save
2:17:47
so if I now go back sorry before I can test it I need to update to the URLs
2:17:52
here pot where int is named primary key I can
2:17:59
use the views dot detail name detail so if I now go to the inbox I can update
2:18:06
the URL here URL conversation column detail pass in
2:18:12
the conversation.id and ID and primary key is always the same
2:18:18
so let me save that now refresh whenever I click it I'm sent to the conversation and here you can see the message
2:18:26
and if I have sent the message I want this to be blue and if you have sent the
2:18:32
message I want it to be Gray so let me just close the inbox go back
2:18:37
to detail and then here before we add the background I can say if
2:18:43
message dot created by equals request.user name is BG blue 100
2:18:52
else then it's gray and if and save so notice it would be
2:18:59
blue because I sent this message great but let me make it so that it was the
2:19:06
code with Stein who sent this refresh and then it's gray okay so now I want to add the form below
2:19:14
here so I can send message back and talk to the other person
2:19:21
So Below this div I create a new the form so form method should be post
2:19:27
action dot which is the page we are on and it's at the csrf token and we can
2:19:33
generate or show the form here form.sp then I need a button I can just go to
2:19:40
the sign up page and copy this
2:19:46
like that and we can close the form and let me just really notice the sun
2:19:52
since we are sending a message if I save now go back and refresh
2:19:58
nothing happens except the button is showing because we are not having any forums there yet
2:20:04
so we need to go back to boost.pi and fix it here
2:20:09
first we can import okay we have imported it but we can see if the form has been
2:20:15
submitted so if request dot method equals post then form
2:20:23
equals conversation message form and we need to pause in the request dot post data
2:20:31
and if form dot is formed is valid then we can create a new
2:20:38
conversation message so conversation message equals
2:20:44
form dot save and need to say commit equals false
2:20:50
and then we need to set a link up to this conversation
2:20:57
and we need to set to create edit or created by requested user and I will
2:21:03
save it and to update the modified date of the conversation you can just add
2:21:09
conversation dot save since we have it already up here and when that is done we can redirect
2:21:15
the user back to the conversation page so return redirect
2:21:22
conversation column detail because that's a primary key to be a primary key
2:21:29
and else we just create an empty instance of this form
2:21:35
and Save so if I now refresh I can't see that
2:21:40
because I forgot to add it down here form form save
2:21:47
refresh and then we have it here hello back send and now this is blue because I sent
2:21:55
it nice it's just a space between this
2:22:01
close empty six better
2:22:08
okay so now we have the conversation here and everything seems to be in order just want to fix the redirect that I did
2:22:15
up here where is it the new conversation yes
2:22:21
here if there are any conversation now we can now return internet return redirect
2:22:28
conversation colon detail and then we can pause in the primary key
2:22:36
equals we want to get the first one from this zero sorry put first Dot
2:22:45
ID I think it's the correct way to do this let me try so if I just go back to
2:22:51
browse the toy car contact seller then I sent directly to the conversation page
2:22:57
perfect so now we have the possibility to create
Summary
2:23:03
items we can edit them delete them you can set them as sold we can view our
2:23:09
items here in the my items section we can go into them at the temp delete them
2:23:15
everything is working we have a conversation between the users and similar
2:23:20
so that is a wrap for this tutorial I hope you enjoyed it and that it was able to follow along
2:23:27
if you want to keep practicing your Django skills feel free to keep building on this project you can add things like
2:23:32
email verification image Galleries and admin dashboard and similar if you have
2:23:39
any questions about the code or anything feel free to leave a comment below and I will answer as soon as I can